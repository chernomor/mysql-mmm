@node mmm_control
@chapter @command{mmm_control} - controlling the monitor
@cindex mmm_control

The monitor daemon may be controlled with the help of @command{mmm_control}. If you have multiple clusters, you should always specify the name of the cluster you want to work with (i.e. to check C1 status, use "mmm_control @@C1 show"). Otherwise - if you have only one MMM cluster, it can be used without cluster name.

@section @code{help}
@cindex help
Show help message.
@section @code{ping}
Ping the monitor deamon to check if it's still alive.

@example
# mmm_control ping
OK: Pinged successfully!
@end example

@noindent
When the monitor is down:

@example
# mmm_control ping
ERROR: Can't connect to monitor daemon!
@end example

@section @code{show}
@cindex show
Show the current cluster status. See @ref{States} for an explanation of the different node states.

@smallexample
# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db2(192.168.0.32) master/AWAITING_RECOVERY. Roles:
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample


@node set_online
@section @code{set_online @var{host}}
@cindex set_online
@code{set_online} is used to recover a node from a failure when it's state is 
@code{AWAITING_RECOVERY} or @code{ADMIN_OFFLINE}. In the following example, 
the host db2 was rebooted. Here's the cluster status:

@smallexample
# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db2(192.168.0.32) master/AWAITING_RECOVERY. Roles:
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample

@noindent
All roles have been moved to hosts db1 and db3 as db2 has failed. Now that it's recovered, we should set it online:
@smallexample
# mmm_control set_online db2
OK: State of 'db2' changed to ONLINE. Now you can wait some time and check its new roles!

# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db2(192.168.0.32) master/ONLINE. Roles: reader(192.168.0.52)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.53)
@end smallexample


@node set_offline
@section @code{set_offline @var{host}}
@cindex set_offline
@code{set_offline} is used to bring a node down manually for maintenance. This will remove all roles and stop replication.

@smallexample
# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db2(192.168.0.32) master/ONLINE. Roles: reader(192.168.0.52)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.53)

# mmm_control set_offline db1
OK: State of 'db1' changed to ADMIN_OFFLINE. Now you can wait some time and check all roles!

mon:~# mmm_control show
  db1(192.168.0.31) master/ADMIN_OFFLINE. Roles:
  db2(192.168.0.32) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.52)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.51), reader(192.168.0.53)
@end smallexample

@noindent
@code{set_online} is used to bring the node back online again. See @ref{set_online}.

@section @code{mode}
Print current mode. In the following example, the monitor is running in @code{ACTIVE} mode:

@example
# mmm_control mode
ACTIVE
@end example

@noindent
Here the monitor is in @code{PASSIVE} mode:

@example
# mmm_control mode
PASSIVE
@end example

@noindent
See @ref{Passive mode}.

@section @code{set_active}
Switch the monitor into @code{ACTIVE} mode:

@example
# mmm_control set_active
OK: Switched into active mode.
@end example

@noindent
See @ref{Passive mode}.

@section @code{set_passive}
Switch the monitor into @code{PASSIVE} mode:

@example
# mmm_control set_passive
OK: Switched into passive mode.
@end example

@noindent
See @ref{Passive mode}.

@section @code{move_role @var{role} @var{host}}
Used to move an exclusive role between the cluster nodes. This command is available in @code{ACTIVE} mode only. Lets assume the following situation:

@smallexample
# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: reader(192.168.0.51)
  db2(192.168.0.32) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.52)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.53)
@end smallexample

@noindent
We use move_role to move the role @code{writer} to host db1:
@smallexample
# mmm_control move_role writer db1
OK: Role 'writer' has been moved from 'db2' to 'db1'. Now you can wait some time and check new roles info!

# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db2(192.168.0.32) master/ONLINE. Roles: reader(192.168.0.52)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.53)
@end smallexample

@section @code{move_role --force @var{role} @var{host}}
Can be used to move the @var{active_master_role} to a host with state @code{REPLICATION_FAIL} or @code{REPLICATION_BACKLOG}. Use this with caution! This command is available in @code{ACTIVE} mode only.

@section @code{set_ip @var{ip} @var{host}}
@code{set_ip} can be used to manipulate the roles in @code{PASSIVE} mode. The changes won't be applied until the monitor is switched into @code{ACTIVE} mode via @code{set_active}.

@*
Let's assume we have our cluster up and running with the following status:

@smallexample
# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50)
  db2(192.168.0.32) master/ONLINE. Roles: reader(192.168.0.51)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample

@noindent
Now, several bad things happen:
@enumerate
@item network connection to db1 fails
@item mmmd_mon detects that db1 has failed
@item mmmd_mon moves the writer role to db2, but can't remove it from db1 (because it can't connect to it)
@item mmmd_mon crashes and the status file gets corrupted.
@item network connection to db1 recovers
@item The admin restarts mmmd_mon
@end enumerate

mmmd_mon has no status information now, and two nodes report, that they have the 
@code{writer} role, so mmmd_mon doesn't know what it should do and will switch 
into @code{PASSIVE} mode.

@smallexample
# mmm_control mode
PASSIVE

# mmm_control show
# --- Monitor is in PASSIVE MODE ---
# Cause: Discrepancies between stored status, agent status and system status during startup.
#
# Stored status:
#   db1(192.168.0.31) master/UNKNOWN. Roles:
#   db2(192.168.0.32) master/UNKNOWN. Roles:
#   db3(192.168.0.33) slave/UNKNOWN. Roles:
#
# Agent status:
#   db1 ONLINE. Roles: writer(192.168.0.50). Master: ?
#   db2 ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51). Master: ?
#   db3 ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53). Master: db2
#
# System status:
#   db1 writable. Roles: writer(192.168.0.50)
#   db2 writable. Roles: writer(192.168.0.50), reader(192.168.0.51)
#   db3 readonly. Roles: reader(192.168.0.52), reader(192.168.0.53)
#
  db1(192.168.0.31) master/ONLINE. Roles: writer(192.168.0.50)
  db2(192.168.0.32) master/ONLINE. Roles: reader(192.168.0.51)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample

@noindent
As you see, mmmd_mon tries to recover the status as well as possible. But in this situation it's wrong so one must move the writer role to db2 manually: 

@smallexample
# mmm_control set_ip 192.168.0.50 db2
OK: Set role 'writer(192.168.0.50)' to host 'db2'.
@end smallexample

@noindent
Now take a look at the status, everything looks ok:

@smallexample
# mmm_control show
# --- Monitor is in PASSIVE MODE ---
# [...]
  db1(192.168.0.31) master/ONLINE. Roles:
  db2(192.168.0.32) master/ONLINE. Roles: writer(192.168.0.50), reader(192.168.0.51)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample

@noindent
Finally switch the monitor into active mode, so that it will apply the roles:

@smallexample
# mmm_control set_active
OK: Switched into active mode.

# mmm_control show
  db1(192.168.0.31) master/ONLINE. Roles: reader(192.168.0.51)
  db2(192.168.0.32) master/ONLINE. Roles: writer(192.168.0.50)
  db3(192.168.0.33) slave/ONLINE. Roles: reader(192.168.0.52), reader(192.168.0.53)
@end smallexample

@*
@strong{Note:} The role @code{reader(192.168.0.51)} has been moved to db1, because @code{reader} is a @code{balanced} role.
