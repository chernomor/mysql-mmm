#!/usr/bin/env perl

use strict;
use warnings FATAL => 'all';
use threads;
use threads::shared;
use Config;
use English qw( PROGRAM_NAME );
use File::Basename;
use POSIX ':sys_wait_h';
use Proc::Daemon;
use Log::Log4perl qw(:easy);
Log::Log4perl->easy_init($INFO);

# Define protocol version
use constant MMM_PROTOCOL_VERSION => 1;

# Check perl for threads support
$Config{useithreads} or die "Recompile Perl with threads to run this program.";


# Include parts of the system
use MMM::Common::Angel;
use MMM::Common::Config;
use MMM::Common::Log;
use MMM::Common::PidFile;
use MMM::Monitor::Monitor;
use MMM::Monitor::NetworkChecker;

chdir('/');
umask(0022);

our $cluster_name = '';
my $postfix = '';
if (scalar(@ARGV) && $ARGV[0] =~ /^@(.*)/) {
    shift(@ARGV);
    $cluster_name = $1;
    $postfix = "_$cluster_name";
	$PROGRAM_NAME = basename($PROGRAM_NAME) . '-' . $cluster_name;
}
else {
	$PROGRAM_NAME = basename($PROGRAM_NAME);
}




MMM::Common::Log::init("mmm_mon_log$postfix.conf", "mmm_mond$postfix");

# Read configuration
our $config = new MMM::Common::Config::;
$config->read("mmm_mon$postfix");
$config->check('MONITOR');




my $debug = $config->{debug};

MMM::Common::Log::debug() if ($debug);

INFO 'STARTING...';

our $monitor	= new MMM::Monitor::Monitor::();

if (!MMM::Monitor::NetworkChecker->initial_check()) {
	LOGDIE "None of the 'ping_ips' could be reached during startup. Network seems to be down - mmm_mond will shutdown now.";
}


my $pidfilename = $config->{monitor}->{pid_path};
my $pidfile = new MMM::Common::PidFile:: $pidfilename;

# Check pid file
LOGDIE	"Can't run second copy of ", $PROGRAM_NAME	if ($pidfile->is_running());
WARN	"Unclean start - found stale pid file!"		if ($pidfile->exists());

unless ($debug) {
	# Go to background
	Proc::Daemon::Init();
	# Set umask again
	umask(0022);
	# Init logging again to re-open fds
	MMM::Common::Log::init("mmm_mon_log$postfix.conf", "mmm_mond$postfix");
}

# Init angel magic, which will restart us if we die unexpected
MMM::Common::Angel::Init($pidfile);

our $shutdown :shared = 0;		# Shutdown flag
our $have_net :shared = 1;		# Network status flag

# Set signal handlers
$SIG{INT} = \&ShutdownHandler;
$SIG{TERM} = \&ShutdownHandler;
$SIG{QUIT} = \&ShutdownHandler;
$SIG{PIPE} = 'IGNORE';
$SIG{CHLD} = \&ChildHandler;

$monitor->init();

$monitor->main();

INFO 'END';
exit(0);

#-----------------------------------------------------------------
sub ShutdownHandler() {
	INFO "Signal received: exiting...";
	$shutdown = 1;
}

#-----------------------------------------------------------------
sub ChildHandler {
	local $!;   # don't let waitpid() overwrite current error
	while ((my $pid = waitpid(-1, WNOHANG)) > 0 && WIFEXITED($?)) {
		DEBUG "Core: reaped child $pid" . ($? ? " with exit $?" : '');
	}
	$SIG{CHLD} = \&ChildHandler;  # loathe sysV
}
